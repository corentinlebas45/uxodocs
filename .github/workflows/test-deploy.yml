name: test-deploy

on:
  push:
    branches:
      - test
      - test-**     # test-arender-v1, test-fast2-v2, etc.
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: test-deploy
  cancel-in-progress: false

jobs:
  aggregate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout destination (test)
        uses: actions/checkout@v4
        with:
          ref: test
          fetch-depth: 0

      - name: Fetch all branches
        run: git fetch --all --prune

      - name: Aggregate branches into Docusaurus version folders
        shell: bash
        run: |
          set -euo pipefail

          rm -rf versioned_docs-* .worktrees
          mkdir -p .worktrees

          # mapping éventuel: "flowerdocs" (branche) -> "flower" (plugin/dossier)
          map_branch_to_plugin() {
            case "$1" in
              flowerdocs) echo "flower" ;;
              *)          echo "$1" ;;
            esac
          }

          declare -A VERSIONS=()

          # Toutes les branches test-*-v*
          mapfile -t BRANCHES < <(git for-each-ref --format='%(refname:short)' refs/remotes/origin/test-* | sort)

          for remote_ref in "${BRANCHES[@]}"; do
            br="${remote_ref#origin/}"                          # ex: test-fast2-v2
            raw_product=$(sed -E 's|^test-([^/-]+)-v[0-9]+$|\1|' <<< "$br")
            version=$(sed -E 's|^test-[^/-]+-(v[0-9]+)$|\1|' <<< "$br")
            plugin_id="$(map_branch_to_plugin "$raw_product")"

            [ -z "$plugin_id" ] && continue
            [ -z "$version" ] && continue

            echo "→ $br  -> plugin=$plugin_id  version=$version"

            worktree_dir=".worktrees/$br"
            git worktree add --force "$worktree_dir" "$br"

            src_dir="$worktree_dir/docs/$plugin_id"
            if [ ! -d "$src_dir" ]; then
              echo "Skip: $src_dir introuvable"
              git worktree remove --force "$worktree_dir"
              continue
            fi

            dest_root="versioned_docs-$plugin_id"
            dest_dir="$dest_root/version-$version"
            mkdir -p "$dest_dir"

            rsync -a --delete "$src_dir"/ "$dest_dir"/

            VERSIONS[$plugin_id]="${VERSIONS[$plugin_id]} $version"

            git worktree remove --force "$worktree_dir"
          done

          # Génère versions-<plugin>.json (ordre décroissant v2, v1…)
          for pid in "${!VERSIONS[@]}"; do
            versions_sorted=$(tr ' ' '\n' <<< "${VERSIONS[$pid]}" | grep -v '^[[:space:]]*$' | sort -r)
            json_array=$(printf '[%s]\n' "$(printf '"%s",' $versions_sorted | sed 's/,$//')")
            echo "$json_array" > "versions-$pid.json"
            echo "versions-$pid.json -> $json_array"
          done

          echo "Résumé :"
          find versioned_docs-* -maxdepth 2 -type d | sort || true

      - name: Commit & push to test
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Aucun changement."
            exit 0
          fi
          git commit -m "chore(test-deploy): aggregate versions into versioned_docs-*/version-* [skip ci]"
          git push origin HEAD:test