name: Sync product docs into test

on:
  push:
    branches:
      - 'test-*'   # ex: test-fast2-v1
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch (source)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse branch -> product & version
        id: parse
        shell: bash
        run: |
          ref="${GITHUB_REF_NAME}"        # ex: test-fast2-v1
          IFS='-' read -r prefix product version <<< "$ref"
          if [[ "$prefix" != "test" || -z "$product" || -z "$version" ]]; then
            echo "Branch name must be test-<product>-<version> (e.g. test-fast2-v1)"; exit 1
          fi
          echo "product=$product" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Prepare worktree for target branch "test"
        shell: bash
        run: |
          git fetch origin test:test || git fetch origin
          git worktree add ../worktree-test origin/test

      - name: Copy docs into versioned folder in test
        shell: bash
        run: |
          set -euo pipefail
          product='${{ steps.parse.outputs.product }}'
          version='${{ steps.parse.outputs.version }}'

          # Source doc in the feature branch
          src_dir="docs/${product}"
          src_file="${src_dir}/index.md"
          if [[ ! -f "$src_file" ]]; then
            echo "Expected ${src_file} in source branch"; exit 1
          fi

          # Target in worktree (branch test)
          target_root="../worktree-test/docs/${product}"
          target_ver="${target_root}/${version}"
          mkdir -p "$target_ver"

          # Copy versioned index
          cp "$src_file" "${target_ver}/index.md"

          # Ensure product landing index exists; (re)generate with version links
          mkdir -p "$target_root"
          # Collect versions as subfolders
          mapfile -t versions < <(find "$target_root" -maxdepth 1 -type d -name "v*" -printf "%f\n" | sort -V)
          {
            echo "# ${product^}"
            echo
            echo "> Pages par version"
            echo
            for v in "${versions[@]}"; do
              # Link to ./vX/index
              echo "- [${v}](./${v}/index)"
            done
            echo
            echo "> Page d’accueil (courte) :"
            echo
            if [[ -f "${target_root}/index.base.md" ]]; then
              cat "${target_root}/index.base.md"
            else
              echo "_Cette page peut présenter le produit. Vous pouvez créer un fichier **docs/${product}/index.base.md** pour personnaliser ce haut de page._"
            fi
          } > "${target_root}/index.md"

      - name: Commit & push to test
        working-directory: ../worktree-test
        shell: bash
        run: |
          product='${{ steps.parse.outputs.product }}'
          version='${{ steps.parse.outputs.version }}'

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add "docs/${product}"
            git commit -m "Sync ${product} ${version} docs from ${GITHUB_REF_NAME}"
            git push origin HEAD:test
            echo "pushed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "pushed=false" >> $GITHUB_OUTPUT
          fi
