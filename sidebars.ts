import fs from 'fs';
import path from 'path';
import type { SidebarsConfig, SidebarItem } from '@docusaurus/plugin-content-docs';

const DOCS_DIR = path.join(__dirname, 'docs');
const PRODUCTS = ['fast2', 'arender', 'flowerdocs'] as const;

const exists = (p: string) => fs.existsSync(p);
const hasIndex = (dir: string) => exists(path.join(dir, 'index.md')) || exists(path.join(dir, 'index.mdx'));
const listDirs = (dir: string) =>
  exists(dir) ? fs.readdirSync(dir, { withFileTypes: true }).filter(d => d.isDirectory()).map(d => d.name) : [];
const titleCase = (s: string) => (s ? s[0].toUpperCase() + s.slice(1) : s);

function buildProductCategory(product: string): SidebarItem | null {
  const productDir = path.join(DOCS_DIR, product);
  if (!hasIndex(productDir)) return null;

  const items: SidebarItem[] = [];

  // 1) Index du produit
  items.push({ type: 'doc', id: `${product}/index`, label: 'Index', key: `${product}-index` });

  // 2) Pages "current" à la racine (hors index)
  const rootDocs = (fs.readdirSync(productDir)
    .filter(n => n.match(/\.(md|mdx)$/i) && !/^index\.mdx?$/i.test(n))
    .map(n => n.replace(/\.(md|mdx)$/i, ''))); // ex: ['guide', 'api']

  if (rootDocs.length > 0) {
    items.push({
      type: 'category',
      label: 'Courant',
      collapsed: true,
      key: `${product}-current`,
      items: rootDocs.map(base => ({
        type: 'doc',
        id: `${product}/${base}`,
        // label optionnel: Docusaurus prendra le titre H1 du fichier
        // label: base,
      })),
    });
  }

  // 3) Catégories par version (v1, v2, …)
  const versions = listDirs(productDir)
    .filter(name => /^v\d+/i.test(name) && hasIndex(path.join(productDir, name)))
    .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));

  for (const v of versions) {
    items.push({
      type: 'category',
      label: v.toLowerCase(),
      collapsed: true,
      key: `${product}-${v.toLowerCase()}`,
      items: [{ type: 'autogenerated', dirName: `${product}/${v}` }],
    });
  }

  return {
    type: 'category',
    label: titleCase(product),
    collapsed: false,
    key: `cat-${product}`,
    items,
  };
}


const sidebarItems: SidebarItem[] = [];

// Intro globale si présente
if (exists(path.join(DOCS_DIR, 'intro.md')) || exists(path.join(DOCS_DIR, 'intro.mdx'))) {
  sidebarItems.push({ type: 'doc', id: 'intro', label: 'Introduction', key: 'intro' });
}

// Un bloc par produit
for (const p of PRODUCTS) {
  const cat = buildProductCategory(p);
  if (cat) sidebarItems.push(cat);
}

const sidebars: SidebarsConfig = { docs: sidebarItems };
export default sidebars;
