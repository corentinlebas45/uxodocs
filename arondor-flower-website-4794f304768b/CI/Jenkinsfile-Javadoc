@Library('utils') _

def flowerVersion
def chatUrl = 'https://chat.googleapis.com/v1/spaces/AAAAqgDzji0/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=7G-4vffovHxJjqWurW4008zL2MiEZR5Yl_Q689TRIM4%3D'
def DEPLOY = false

pipeline {
    agent {
		ecs {                 
			inheritFrom 'maven'
			image  'artifactory.arondor.cloud:5002/jenkins-agent-allure:latest-jdk8'
		}
	}
    stages {
		stage('UserInput') {
			input {
				message "Quelle version de la Javadoc FD souhaitez-vous publier ? "
				ok "Valider"
				parameters {
					string(name: 'FDVERSION', defaultValue: "", description: 'Version FD')
				}
			}
			steps {
				script {
					echo "Ask to deploy version ${FDVERSION}"
					flowerVersion = FDVERSION
					DEPLOY = true;
				}
			}
		}
		stage('Fetch javadocs from artifactory') {
			when {
				equals expected: "true", actual: "${DEPLOY}"
			}
			steps{
				script{
					downloadJavadoc('service-api', flowerVersion)
					downloadJavadoc('domain', flowerVersion)
					downloadJavadoc('dao-api', flowerVersion)
					downloadJavadoc('operation-api', flowerVersion)
					downloadJavadoc('ws-api', flowerVersion)
				}
			}
		}
        stage('Publish javadocs to S3 bucket') {
			when {
				equals expected: "true", actual: "${DEPLOY}"
			}
			steps{
				script{
					unzipThenUploadJavadoc('service-api', 'service')
					unzipThenUploadJavadoc('domain', 'domain')
					unzipThenUploadJavadoc('dao-api', 'dao')
					unzipThenUploadJavadoc('operation-api', 'operation')
					unzipThenUploadJavadoc('ws-api', 'ws')
				}
			}
		}
    }
    post {
	    always {
	        script{
	        	pipelineUtils.publishNotif (chatUrl, env, currentBuild, "Site - Publication JavaDoc FD - ${flowerVersion}");
	        }
	    }
    }
}

def unzipThenUploadJavadoc(project, path) {
  def files = findFiles(glob: "flower-docs-$project-*-javadoc.jar")
	def dirPath = "${files[0].path}";
	unzip zipFile: dirPath, dir: project
	withAWS(credentials:'flower-aws') {
		s3Upload(file: project, bucket: "flower-website/javadocs/$path")
	}
}
	
def downloadJavadoc(project, version) {
	def fileName = "flower-docs-${project}-${version}-javadoc.jar"
	echo "Start to download ${fileName} from artifactory"
	def downloadSpec = """{
		"files": [
			{
				"pattern": "arondor-all/*/$version/$fileName",
				"flat": "true"
			}
		]
	}"""
	echo downloadSpec
	def server = Artifactory.server('Arondor Artifactory')
	server.download spec: downloadSpec, failNoOp: true;
}