"use strict";(globalThis.webpackChunkuxodocs=globalThis.webpackChunkuxodocs||[]).push([[2945],{2677:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/workers-515d706f391a92a0a245f7fc9f0cdc3d.png"},3425:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/workers-task-queue-other2025-38f19ef65dc0ace7c6432155a1ae2c41.png"},8172:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"components/worker","title":"The worker","description":"!!! Hint","source":"@site/docs/fast2/components/worker.md","sourceDirName":"components","slug":"/components/worker","permalink":"/uxodocs/docs/fast2/components/worker","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Internal database","permalink":"/uxodocs/docs/fast2/components/database"},"next":{"title":"Fast2 cookbooks","permalink":"/uxodocs/docs/fast2/cookbooks/"}}');var o=n(4848),s=n(8453);const i={},a="The worker",l={},d=[{value:":material-hard-hat: Configure the worker(s)",id:"material-hard-hat-configure-the-workers",level:2},{value:"Change JDK",id:"change-jdk",level:3},{value:"Memory allocation",id:"memory-allocation",level:3},{value:"Queues management",id:"queues-management",level:3},{value:"Disabled the embedded worker",id:"disabled-the-embedded-worker",level:3},{value:":octicons-zap-24: Advanced use",id:"octicons-zap-24-advanced-use",level:2},{value:"Several workers",id:"several-workers",level:3},{value:"Context",id:"context",level:3},{value:"How to set up",id:"how-to-set-up",level:3},{value:"Limits",id:"limits",level:3},{value:"Resource sharing",id:"resource-sharing",level:4},{value:"Connections and sessions maxout",id:"connections-and-sessions-maxout",level:4},{value:"And what about...",id:"and-what-about",level:3},{value:"Several workers on the same machine?",id:"several-workers-on-the-same-machine",level:4},{value:"Several workers on the same queue?",id:"several-workers-on-the-same-queue",level:4},{value:"Remote worker: Configuration Guide",id:"remote-worker-configuration-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Remote worker config",id:"remote-worker-config",level:4},{value:"Network",id:"network",level:4},{value:"Same Network Scenario",id:"same-network-scenario",level:5},{value:"Different Networks Scenario",id:"different-networks-scenario",level:5},{value:"Configure Worker and Broker on same network",id:"configure-worker-and-broker-on-same-network",level:4},{value:"Configure Worker and Broker on different networks",id:"configure-worker-and-broker-on-different-networks",level:4},{value:"Remote worker configuration",id:"remote-worker-configuration",level:4},{value:"File storage : broker or worker ?",id:"file-storage--broker-or-worker-",level:5},{value:"Example",id:"example",level:5},{value:"File storage architecture",id:"file-storage-architecture",level:5},{value:"Troubleshooting",id:"troubleshooting",level:4},{value:"Common Issues",id:"common-issues",level:5},{value:"Ping does not work",id:"ping-does-not-work",level:6},{value:"Connection times out",id:"connection-times-out",level:6},{value:"Port is closed",id:"port-is-closed",level:6},{value:"Public IP changes",id:"public-ip-changes",level:6}];function c(e){const r={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"the-worker",children:"The worker"})}),"\n",(0,o.jsx)(r.p,{children:"!!! Hint"}),"\n",(0,o.jsx)(r.p,{children:"The Worker is the punnet processor, applying the changes onto the punnet, according to how the tasks have been configured by the user."}),"\n",(0,o.jsx)(r.p,{children:"The workers! Corner stones of Fast2, these guys can litterally add up and constitute a real digitized hive working to migrate your documents,\nyour contents, your rules, your metadata, all synchronously, exactly where you expect them (or asked them to be), never stepping on each other.\nNo migration project could be overcome if it was not by them!"}),"\n",(0,o.jsx)(r.p,{children:"If their role can seem quite important, they are paradoxically as easy and straight forward to get up and running. Just the right files to gather, as mentioned here, and a new worker just enrolled!"}),"\n",(0,o.jsxs)(r.p,{children:["One of the major aspects of a promising migration project is what all project managers will ask you to vouch for: performance metrics. Let\u2019s suppose you need to migrate documents from a source system into a second one, the latter having a much higher input flow tolerance. No need for empirical statistics to know that the old ECM will be the bottleneck. An architecture similar to a hybrid deployment variant (topic we presented ",(0,o.jsx)(r.a,{href:"https://www.fast2.tech/blog/deployment-variants/",children:"here"}),") could easily be envisioned. But let\u2019s complicate things a little bit here: in-between the extraction and the injection phase, the metadata have to be updated, with new date formatting and heavy mapping of document related properties. Can still a hybrid-like architecture save you now ?"]}),"\n",(0,o.jsx)(r.h2,{id:"material-hard-hat-configure-the-workers",children:":material-hard-hat: Configure the worker(s)"}),"\n",(0,o.jsx)(r.p,{children:"The required files for the worker to run properly are the following:"}),"\n",(0,o.jsxs)(r.table,{children:[(0,o.jsx)(r.thead,{children:(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.th,{children:"Item"}),(0,o.jsx)(r.th,{children:"Purpose"})]})}),(0,o.jsxs)(r.tbody,{children:[(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:":material-folder: config/*"}),(0,o.jsx)(r.td,{children:"Configuration files, broker endpoint etc"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:":material-folder: worker-libs/*"}),(0,o.jsx)(r.td,{children:"All libraries and dependencies for tasks executions"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:":fontawesome-brands-java: fast2-worker-package-X.Y.Z.jar"}),(0,o.jsx)(r.td,{children:"Worker main unit"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:":material-microsoft-windows: startup-worker.bat"}),(0,o.jsx)(r.td,{children:"Binary file for Windows"})]}),(0,o.jsxs)(r.tr,{children:[(0,o.jsx)(r.td,{children:":fontawesome-brands-linux: startup-worker.sh"}),(0,o.jsx)(r.td,{children:"Binary file for Linux"})]})]})]}),"\n",(0,o.jsx)(r.h3,{id:"change-jdk",children:"Change JDK"}),"\n",(0,o.jsxs)(r.p,{children:["If you want to use a different jdk version than the one referenced in JAVA_HOME environment variable, you can update the ",(0,o.jsx)(r.code,{children:"JAVA_HOME"})," value in ",(0,o.jsx)(r.code,{children:"./config/env.properties"}),":"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",metastring:'title="./config/env.properties"',children:"...\n# Override JAVA_HOME environment variable\nJAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\n"})}),"\n",(0,o.jsx)(r.h3,{id:"memory-allocation",children:"Memory allocation"}),"\n",(0,o.jsxs)(r.p,{children:["Depending on the amount of documents and the number of tasks you are dealing with, you may want to control max memory usage allowed (",(0,o.jsx)(r.code,{children:"Xmx"}),") for worker."]}),"\n",(0,o.jsx)(r.p,{children:"The default setting is 1GB for this resource:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",metastring:'title="./config/env.properties"',children:"...\n# Worker Maximum memory allowed (Xmx)\nWORKER_MAX_MEMORY=1G\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Keep in mind that this property is designed for workers started from the binary ",(0,o.jsx)(r.code,{children:"start-worker.sh|.bat"}),". If you intend to target the embedded worker, go to ",(0,o.jsx)(r.code,{children:"./config/application.properties"})," instead:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",children:"...\n# Broker embedded worker max memory\nbroker.embeddedworker.max.memory=1G\n"})}),"\n",(0,o.jsx)(r.h3,{id:"queues-management",children:"Queues management"}),"\n",(0,o.jsxs)(r.p,{children:["Queues have to be declared to the workers for them to process the punnets stored in these sames ",(0,o.jsx)(r.em,{children:"queues"}),"."]}),"\n",(0,o.jsx)(r.p,{children:"The queues names will also be declared in the tasks configuration panel, so the only worker in charge of executing a task with a defined queue will be the worker whose queue regex matched this very queue."}),"\n",(0,o.jsx)(r.p,{children:"In order to have specific worker tied to particular queues, the configuration needs to be updated here:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",metastring:'title="./config/application.properties" {2}',children:"# Worker queue regex filter\n# worker.queue.regex=.*\n"})}),"\n",(0,o.jsx)(r.h3,{id:"disabled-the-embedded-worker",children:"Disabled the embedded worker"}),"\n",(0,o.jsxs)(r.p,{children:["In case serveral workers are required for specific queues and tasks, there might be no more need of the embedded worker itself. To make sure not to have it running pointlessly, this worker can be disactivated from the ",(0,o.jsx)(r.code,{children:"./config/application.properties"})," files, as so :"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",metastring:'title="./config/application.properties" {2}',children:"# Disable auto-launch of embedded worker\nbroker.embedded.worker.autostart=false\n"})}),"\n",(0,o.jsx)(r.h2,{id:"octicons-zap-24-advanced-use",children:":octicons-zap-24: Advanced use"}),"\n",(0,o.jsxs)(r.p,{children:["One of the major aspects of a promising migration project is what all project managers will ask you to vouch for: performance metrics.\nLet\u2019s suppose you need to migrate documents from a source system into a second one, the latter having a much higher input flow tolerance. No need for empirical statistics to know that the old ECM will be the bottleneck. An architecture similar to a hybrid deployment variant (topic we presented ",(0,o.jsx)(r.a,{href:"https://www.fast2.tech/blog/deployment-variants/",children:"here"}),") could easily be envisioned. But let\u2019s complicate things a little bit here: in-between the extraction and the injection phase, the metadata have to be updated, with new date formatting and heavy mapping of document related properties. Can still a hybrid-like architecture save you now ?"]}),"\n",(0,o.jsx)(r.h3,{id:"several-workers",children:"Several workers"}),"\n",(0,o.jsx)(r.h3,{id:"context",children:"Context"}),"\n",(0,o.jsxs)(r.p,{children:["One of the major aspects of a promising migration project is what all project managers will ask you to vouch for: performance metrics.\nLet\u2019s suppose you need to migrate documents from a source system into a second one, the latter having a much higher input flow tolerance. No need for empirical statistics to know that the old ECM will be the bottleneck. An architecture similar to a hybrid deployment variant (topic we presented ",(0,o.jsx)(r.a,{href:"https://www.fast2.tech/blog/deployment-variants/",children:"here"}),") could easily be envisioned.\nBut let\u2019s complicate things a little bit here: in-between the extraction and the injection phase, the metadata have to be updated, with new date formatting and heavy mapping of document related properties. Can still a hybrid-like architecture save you now ?"]}),"\n",(0,o.jsx)(r.h3,{id:"how-to-set-up",children:"How to set up"}),"\n",(0,o.jsx)(r.p,{children:"Checkout in the official documentation the required Fast2 files and folders to set up a new worker. Leave a copy of the required files and folders on the machine hosting the source environment. This worker -- let\u2019s label it as worker-S for \u201csource\u201d -- will be assigned to the extraction part.\nAs indicated in the installation section, starting Fast2 will launch an embedded worker, assigned by default to all tasks composing the migration workflow. This worker here will be our worker-D (for \u201cDestination\u201d, or \u201cDefault\u201d)."}),"\n",(0,o.jsxs)(r.p,{children:["Plug the worker-S onto the Fast2 broker (yes, the workers -- as ",(0,o.jsx)(r.a,{href:"/uxodocs/docs/fast2/getting-started/overall-concepts#architecture",children:"illustrated here"})," -- manifest themselves to the broker, and not the other way around) : to do so, open the ",(0,o.jsx)(r.code,{children:"config/application.properties"})," of the worker-S :"]}),"\n",(0,o.jsx)(r.p,{children:'=== "v2.4-"'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",metastring:'title="./config/application.properties"  {4}',children:"# Fast2 2.1.0 configuration\n\n# Remote broker host to use by the worker\nbroker.host=localhost\n\n# Remote broker port to use by the worker\n# broker.port=1789\n...\n"})}),"\n",(0,o.jsx)(r.p,{children:'=== "v2.5+"'}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",metastring:'title="./config/application.properties"  {4}',children:"# Fast2 2.8.0 configuration\n\n# Remote broker url to use by the worker\nbroker.url=http://localhost:1789/broker\n\n# Port exposed by Broker\nserver.port=1789\n# Context path used by Broker\nserver.servlet.context-path=/\n\n...\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Update the name (or IP address) of the machine where Fast2 is running (",(0,o.jsx)(r.code,{children:"broker.host"}),"), and the name of the queue which the worker will be assigned to (ex/ \u201cextraction\u201d)."]}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsxs)(r.li,{children:["Start now the Fast2 server (",(0,o.jsx)(r.a,{href:"/uxodocs/docs/fast2/getting-started/installation#start-fast2-broker",children:"documentation here"}),") to have it up and running alongside the worker-D. This latter will be assigned to both the ",(0,o.jsx)(r.em,{children:"mapping"})," of the metadata and the injection of the documents in the destination environment."]}),"\n",(0,o.jsxs)(r.li,{children:["Then start the worker-S (",(0,o.jsx)(r.a,{href:"/uxodocs/docs/fast2/getting-started/installation#start-fast2-worker",children:"documentation here"}),")."]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{alt:"Schema of the architecture for a 2-worker migration",src:n(2677).A+"",width:"2198",height:"1237"})}),"\n",(0,o.jsx)(r.p,{children:"Open your browser to reach the Fast2 UI, and then build up your migration workflow. For the sake of this example, 3 tasks only will suit our needs of extraction, metadata transformation and load."}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsx)(r.p,{children:"3 tasks, 3 queues, 2 workers: lock and load !!"}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["The extraction task will be linked to the same queue we mentioned in the ",(0,o.jsx)(r.code,{children:"config/application.properties"})," of the lone worker (ex/ source-queue)."]}),"\n",(0,o.jsx)(r.p,{children:"No need to set a queue for the last task, as it will be handled by default by the last worker started with the Fast2 server."}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{alt:"Task config with queue for worker S",src:n(9925).A+"",width:"338",height:"246"})}),"\n",(0,o.jsxs)(r.p,{children:["For this worker, the ",(0,o.jsx)(r.code,{children:"config/application.properties"})," will have the queue details set as follows:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",children:"...\n# Worker queue regex filter\nworker.queue.regex=source-queue\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{alt:"Task config with queue for worker D",src:n(3425).A+"",width:"777",height:"241"})}),"\n",(0,o.jsxs)(r.p,{children:["For this worker, the ",(0,o.jsx)(r.code,{children:"config/application.properties"})," will have the queue details set as follows:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ini",children:"...\n# Worker queue regex filter\nworker.queue.regex=metadata-queue,default\n"})}),"\n",(0,o.jsx)(r.h3,{id:"limits",children:"Limits"}),"\n",(0,o.jsx)(r.p,{children:"Just like any architectural decisions, such model comes with its drawbacks and benefits. If the benefits can sound quite obvious given past explanations, the downsides are worth mentioning. We will shortly discuss here about the two most current:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Resource sharing: the more workers you\u2019ll start on the same machine, the less they\u2019ll have individually available resources."}),"\n",(0,o.jsx)(r.li,{children:"Connections and sessions: duplication of workers induces duplications of server calls, therefore opened sessions."}),"\n"]}),"\n",(0,o.jsx)(r.h4,{id:"resource-sharing",children:"Resource sharing"}),"\n",(0,o.jsx)(r.p,{children:"Let\u2019s consider a migration server with 8GB of RAM (which is a pretty good start, don\u2019t get me wrong):\nwith a running database in the background \u2014 the embedded Elasticsearch instance which Fast2 relies on in terms of traceability \u2014 needing roughly 3GB, the operating system using 3GB as well, you\u2019ll end up with only 2GB for your worker to open around 100 documents per second and performing content conversion, metadata transformation etc. Needless to say, adding a second worker won\u2019t help you much here !"}),"\n",(0,o.jsx)(r.p,{children:"Increase the threads amount (which you can do in the server configuration, straight from the Fast2 UI) of the queues on which you worker will get the punnets to process will surely be the go-to way for increasing your current performances."}),"\n",(0,o.jsx)(r.p,{children:"The most recommended scale-up here would be to start another worker on a different machine, using totally independent physical resources and combining them to the ones already solicited by the Fast2 server."}),"\n",(0,o.jsx)(r.h4,{id:"connections-and-sessions-maxout",children:"Connections and sessions maxout"}),"\n",(0,o.jsx)(r.p,{children:"A second non-negligible aspect is the number of connections and sessions opened by the workers to communicate with both the source and destination environments. Adding worker will consequently increase these numbers, especially if several threads have been allocated to their processing queues."}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)("br",{}),"\n",(0,o.jsx)(r.h3,{id:"and-what-about",children:"And what about..."}),"\n",(0,o.jsx)(r.h4,{id:"several-workers-on-the-same-machine",children:"Several workers on the same machine?"}),"\n",(0,o.jsx)(r.p,{children:"One easy application of multi-worker architecture could be the need of having several source system to extract documents from, via dedicated maps for each. Booting up several workers associated with the right task queues will provide sufficent segmentation to have your migration happen simultaneously."}),"\n",(0,o.jsx)(r.p,{children:"Sessions conflicts can be prevented as well but such choices of architecture. At the end of the day, only one Fast2 server will have been managing all your different workflows, all you data will be stored in the very same Elasticsearch database, all with significantly better performance rates!"}),"\n",(0,o.jsx)(r.h4,{id:"several-workers-on-the-same-queue",children:"Several workers on the same queue?"}),"\n",(0,o.jsx)(r.p,{children:"In case of seeking for more physical resources for your Fast2 server which, let\u2019s say, is not a scalable machine, you could envision to \u201cplug\u201d a second server to the first one: start another worker on the second machine, and have it aim to the initial Fast2 server where the broker is running. This separate worker will be able to process any task of your workflow, any queue as well, just like the embedded one."}),"\n",(0,o.jsx)(r.p,{children:"However there would be absolutely no point in starting another worker assigned to the same queues as the embedded one on the Fast2 server. That won\u2019t positively affect you performance rates. If that was you goal before scrolling this page, the secret relies in adding more threads to your queues (as mentioned earlier)!"}),"\n",(0,o.jsx)(r.h3,{id:"remote-worker-configuration-guide",children:"Remote worker: Configuration Guide"}),"\n",(0,o.jsx)(r.p,{children:"This guide explains how to configure a remote worker to your broker. It covers both scenarios: when both applications are on the same network and when they are on different networks."}),"\n",(0,o.jsx)(r.h4,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Java Development Environment: Both the worker and broker applications should have at least a jdk8+ available on their environment. We highly recommend a jdk11."}),"\n",(0,o.jsx)(r.li,{children:"Network Connectivity: Both systems should be able to connect to each other through the network (whether local or remote)."}),"\n"]}),"\n",(0,o.jsx)(r.h4,{id:"remote-worker-config",children:"Remote worker config"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-properties",children:"server.host=<broker_ip_address>\n\n# Remote = docs ends broker side\n# Local = docs ends worker side\nworker.content.factory=<remote|local>\n"})}),"\n",(0,o.jsx)(r.h4,{id:"network",children:"Network"}),"\n",(0,o.jsx)(r.h5,{id:"same-network-scenario",children:"Same Network Scenario"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Local IP Address: The worker and broker should be able to communicate over their local network using their local IP addresses."}),"\n",(0,o.jsx)(r.li,{children:"Network Configuration: The local network should not have strict firewall rules that block communication on the required ports."}),"\n"]}),"\n",(0,o.jsx)(r.h5,{id:"different-networks-scenario",children:"Different Networks Scenario"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Public IP Address of Broker: The broker should have a public IP address, or at least a static public IP from the router."}),"\n",(0,o.jsx)(r.li,{children:"Port Forwarding on Router: The router connected to the broker must have port forwarding configured to forward incoming traffic on specific ports to the broker\u2019s local IP address."}),"\n",(0,o.jsx)(r.li,{children:"Firewall Configuration: The firewall on both systems (worker and broker) should allow incoming and outgoing traffic on the required ports."}),"\n",(0,o.jsx)(r.li,{children:"Dynamic DNS (Optional): If the public IP address of the broker is dynamic, you may want to use Dynamic DNS (DDNS) to avoid manually changing the address every time it changes."}),"\n"]}),"\n",(0,o.jsx)(r.h4,{id:"configure-worker-and-broker-on-same-network",children:"Configure Worker and Broker on same network"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Step 1: Ensure Network Connectivity"}),"\nOn the worker machine, ensure that you can ping the public IP address of the broker. You may need to test it by pinging broker_public_ip_address."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"ping <broker_public_ip_address>\n"})}),"\n",(0,o.jsx)(r.p,{children:"If the ping works, proceed to the next step. If the ping does not work, there may be an issue with the router, firewall, or routing configuration."}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Step 2: Update the broker.url in the Worker Configuration"}),"\nOn the worker machine, update the ",(0,o.jsx)(r.strong,{children:"server.host"})," property in your ",(0,o.jsx)(r.em,{children:"config/application.properties"})," file to the local IP address of the broker."]}),"\n",(0,o.jsxs)(r.p,{children:["If needed, you can change the protocol and port information as well. The ",(0,o.jsx)(r.strong,{children:"broker.url"})," variable is automatically updated. Do not change it."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-properties",children:"server.protocol=http\nserver.host=<broker_local_ip_address>\nserver.port=1789\n\nbroker.url=${server.protocol}://${server.host}:${server.port}/broker\n"})}),"\n",(0,o.jsx)(r.p,{children:"Make sure the port is open and the broker is listening on the specified port."}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Step 3: Verify broker is listening on specified port"}),"\nOn the broker machine, verify that the broker application is listening on the port you specified by using the following command:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"# Linux\nsudo netstat -tuln | grep <port>\n\n# Windows\n`netstat -ano | findstr <port>`\n"})}),"\n",(0,o.jsx)(r.p,{children:"The output should show something like:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"tcp6       0      0 :::<port>                 :::*                    LISTEN\n"})}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Step 4: Test the connection"}),"\nOn the worker machine, test the connection to the broker using nc (netcat) to check if the port is open and accessible:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"# Linux\nnc -zv <broker_local_ip_address> <port>\n\n# Windows\ntelnet <broker_local_ip_address> <port>\n"})}),"\n",(0,o.jsx)(r.p,{children:"If the connection is successful, the worker and broker can communicate."}),"\n",(0,o.jsx)(r.h4,{id:"configure-worker-and-broker-on-different-networks",children:"Configure Worker and Broker on different networks"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Step 1: Configure Port Forwarding on the Broker\u2019s Router"}),"\nOn the router connected to the broker, you need to configure port forwarding to forward incoming traffic on a specific port to the broker's local IP address and port."]}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsx)(r.li,{children:"Log into the router's web interface (usually at 192.168.1.1 or 192.168.0.1)."}),"\n",(0,o.jsx)(r.li,{children:"Navigate to the Port Forwarding or NAT settings section."}),"\n",(0,o.jsx)(r.li,{children:"Add a rule to forward traffic coming on port to the internal IP address of the broker (broker_local_ip_address)."}),"\n",(0,o.jsx)(r.li,{children:"Save the settings."}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Step 2: Verify Firewall Configuration"}),"\nEnsure that both the broker\u2019s firewall and the worker\u2019s firewall allow communication on the specified port. If necessary, open the required port in the firewall:"]}),"\n",(0,o.jsx)(r.p,{children:"On Ubuntu, to open a port in the firewall (if using ufw):"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"sudo ufw allow <port>/tcp\n"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"Step 3: Repeat steps explained for same network"})}),"\n",(0,o.jsx)(r.h4,{id:"remote-worker-configuration",children:"Remote worker configuration"}),"\n",(0,o.jsx)(r.p,{children:"You have multiple options through the application.properties file to configure your remote worker."}),"\n",(0,o.jsx)(r.h5,{id:"file-storage--broker-or-worker-",children:"File storage : broker or worker ?"}),"\n",(0,o.jsx)(r.p,{children:"You can either store the files processed from the broker or at the worker side.\nTo choose one or the other you simply have to modify this property :"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-properties",children:"worker.content.factory=<remote|local>\n"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["Select ",(0,o.jsx)(r.strong,{children:"remote"})," to send back documents to the broker."]}),"\n",(0,o.jsxs)(r.li,{children:["Select ",(0,o.jsx)(r.strong,{children:"local"})," (default value) to keep documents processed by the worker from its side"]}),"\n"]}),"\n",(0,o.jsx)(r.h5,{id:"example",children:"Example"}),"\n",(0,o.jsx)(r.p,{children:"This is an example to understand what happens for both scenarios. Imagine that we are extracting some documents from a Documentum environment and we need to convert tiff files to a pdf format."}),"\n",(0,o.jsx)(r.h5,{id:"file-storage-architecture",children:"File storage architecture"}),"\n",(0,o.jsxs)(r.p,{children:["By default, documents processed by the worker will be stored under the folder ",(0,o.jsx)(r.strong,{children:"files/"}),".\nThen documents will follow a strict hierarchy as mentioned in the property ",(0,o.jsx)(r.strong,{children:"worker.files.pattern"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-properties",children:"worker.files.dir=files/\nworker.files.pattern=@{campaign?:'shared'}/@{step?:'shared'}/@{documentId?:punnetId}\n"})}),"\n",(0,o.jsx)(r.p,{children:"Values shown above are used by default. Feel free to change it to match your requirements in term of folder organization."}),"\n",(0,o.jsx)(r.h4,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(r.h5,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsx)(r.h6,{id:"ping-does-not-work",children:"Ping does not work"}),"\n",(0,o.jsx)(r.p,{children:"Ensure that the devices can actually communicate over the network. Double-check the network cables, Wi-Fi connection, and make sure there are no misconfigured network settings or firewalls blocking ICMP packets."}),"\n",(0,o.jsx)(r.h6,{id:"connection-times-out",children:"Connection times out"}),"\n",(0,o.jsx)(r.p,{children:"If using public IP addresses, check the router\u2019s port forwarding configuration and verify that the firewall on both the broker and worker machines allows traffic on the relevant port."}),"\n",(0,o.jsx)(r.h6,{id:"port-is-closed",children:"Port is closed"}),"\n",(0,o.jsx)(r.p,{children:"Verify that the broker application is actually listening on the specified port, and ensure the port is not blocked by a firewall."}),"\n",(0,o.jsx)(r.h6,{id:"public-ip-changes",children:"Public IP changes"}),"\n",(0,o.jsx)(r.p,{children:"If the public IP of the broker changes frequently, consider using a Dynamic DNS (DDNS) service to map a domain name to the changing IP address, so the worker can use the domain name instead of an IP address."})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(6540);const o={},s=t.createContext(o);function i(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:r},e.children)}},9925:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/workers-task-queue-src2025-78c692ad194b72a507e7dc554c2c8f0c.png"}}]);